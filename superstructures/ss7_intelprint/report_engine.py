import os
import json
from datetime import datetime
from fpdf import FPDF
from utils.gpt_call import call_gpt_model
from utils.db import get_chat_thread, get_incident, get_job_by_incident

def generate_pdf_report(incident_id: str) -> str:
    reports_dir = "logs/reports"
    os.makedirs(reports_dir, exist_ok=True)
    output_path = os.path.join(reports_dir, f"incident_{incident_id}.pdf")

    try:
        chat = get_chat_thread(incident_id)
        incident = get_incident(incident_id)
        job = get_job_by_incident(incident_id)

        chat_str = "\n".join([f"{m['sender']}: {m['message']}" for m in chat])
        prompt = (
            "You are a property maintenance report generator.\n\n"
            "Given a chat log and job history, write a summary report for the landlord that includes:\n"
            "- Overview of issue\n"
            "- Timeline of resolution\n"
            "- Actions taken\n"
            "- Outcome\n"
            "- Optional review or follow-up notes\n\n"
            "Return only plaintext. No formatting. No headings.\n\n"
            f"CHAT LOG:\n{chat_str}\n"
        )
        summary = call_gpt_model(prompt)

        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)

        pdf.cell(200, 10, txt=f"Incident Report – ID {incident_id}", ln=True, align="C")
        pdf.ln(10)

        # Section 1 – Metadata
        pdf.set_font("Arial", style='B', size=12)
        pdf.cell(200, 10, "Incident Metadata", ln=True)
        pdf.set_font("Arial", size=11)
        for k, v in incident.items():
            pdf.cell(200, 8, f"{k}: {v}", ln=True)

        if job:
            pdf.ln(5)
            pdf.set_font("Arial", style='B', size=12)
            pdf.cell(200, 10, "Job Metadata", ln=True)
            pdf.set_font("Arial", size=11)
            for k, v in job.items():
                pdf.cell(200, 8, f"{k}: {v}", ln=True)

        # Section 2 – GPT Summary
        pdf.ln(5)
        pdf.set_font("Arial", style='B', size=12)
        pdf.cell(200, 10, "GPT Summary", ln=True)
        pdf.set_font("Arial", size=11)
        for line in summary.split("\n"):
            pdf.multi_cell(0, 8, line)

        # Section 3 – Chat Highlights
        pdf.ln(5)
        pdf.set_font("Arial", style='B', size=12)
        pdf.cell(200, 10, "Chat Highlights", ln=True)
        pdf.set_font("Arial", size=11)
        for m in chat[-5:]:
            line = f"{m['sender']}: {m['message']}"
            pdf.multi_cell(0, 8, line)

        # Footer
        pdf.ln(10)
        pdf.set_font("Arial", size=10)
        pdf.cell(200, 10, f"Report generated: {datetime.utcnow().isoformat()}", ln=True)
        pdf.cell(200, 10, "Generated by LandTen Agent · © 2025", ln=True)

        pdf.output(output_path)
        return os.path.abspath(output_path)

    except Exception as e:
        return f"⚠️ Failed to generate report: {str(e)}"
